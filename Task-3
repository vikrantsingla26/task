#include <iostream>
#include <vector>

using namespace std;

// Function to print the Sudoku grid
void printGrid(const vector<vector<int>>& grid) {
    for (int row = 0; row < 9; ++row) {
        for (int col = 0; col < 9; ++col) {
            cout << grid[row][col] << " ";
        }
        cout << endl;
    }
}

// Check if it's safe to place a number at grid[row][col]
bool isSafe(const vector<vector<int>>& grid, int row, int col, int num) {
    // Row and column check
    for (int x = 0; x < 9; ++x) {
        if (grid[row][x] == num || grid[x][col] == num)
            return false;
    }
    // 3x3 subgrid check
    int startRow = row - row % 3, startCol = col - col % 3;
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            if (grid[startRow + i][startCol + j] == num)
                return false;
    return true;
}

// Main solver function
bool solveSudoku(vector<vector<int>>& grid) {
    for (int row = 0; row < 9; ++row) {
        for (int col = 0; col < 9; ++col) {
            if (grid[row][col] == 0) {
                for (int num = 1; num <= 9; ++num) {
                    if (isSafe(grid, row, col, num)) {
                        grid[row][col] = num;
                        if (solveSudoku(grid))
                            return true;
                        grid[row][col] = 0; // Backtrack
                    }
                }
                return false; // Trigger backtracking
            }
        }
    }
    return true; // Solved
}

int main() {
    vector<vector<int>> grid(9, vector<int>(9));
    cout << "Enter the Sudoku puzzle (9 lines, 9 numbers per line, use 0 for empty cells):\n";
    for (int i = 0; i < 9; ++i)
        for (int j = 0; j < 9; ++j)
            cin >> grid[i][j];
    
    if (solveSudoku(grid)) {
        cout << "Solved Sudoku:\n";
        printGrid(grid);
    } else {
        cout << "No solution exists for the given Sudoku puzzle.\n";
    }
    return 0;
}
